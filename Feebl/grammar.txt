program     → declaration* EOF;
declaration → funcDecl | varDecl | statement ;
funDecl  → "func" function ;
function → IDENTIFIER "(" parameters? ")" block ;
parameters → IDENTIFIER ( "," IDENTIFIER )* ;
statement   → exprStmt | block | ifstmt | whileStmt | forStmt | returnStmt;
varDecl     → "var" IDENTIFIER( "=" expression )? ";" ;
exprStmt    → expression ";" ;
block       → "{" declaration* "}" ;
ifStmt      → "if" "(" expression ")" statement( "else" statement )? ;
whileStmt   → "while" "(" expression ")" statement ;
forStmt     → "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
returnStmt → "return" expression? ";" ;

expression → assignment ;
assignment → IDENTIFIER "=" assignment | logic_or ;

logic_or   → logic_and( "||" logic_and )* ;
logic_and  → bit_inc_or( "&&" bit_inc_or )* ;
bit_inc_or → bit_ex_or( "|" bit_ex_or )* ;
bit_ex_or  → bit_and( "^" bit_and )* ;
bit_and    → equality( "&" equality )* ;

equality       → comparison(( "!=" | "==" ) comparison )* ;
comparison     → addition(( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       → multiplication(( "-" | "+" ) multiplication )* ;
multiplication → unary(( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary | call ;
call           → primary ( "(" arguments? ")" )* ;
arguments      → expression ( "," expression )* ;

primary → "true" | "false" | "nil"
         | NUMBER | STRING
         | "(" expression ")"
         | IDENTIFIER ;

 