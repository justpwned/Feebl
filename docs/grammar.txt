 program        → declaration* EOF;
 declaration    → varDecl | statement ;
 statement      → exprStmt | printStmt | block | ifstmt | whileStmt | for Stmt;
 varDecl        → "let" IDENTIFIER( "=" expression )? ";" ;
 exprStmt       → expression ";" ;
 printStmt      → "print" expression ";" ;
 block          → "{" declaration* "}" ;
 ifStmt         → "if" "(" expression ")" statement( "else" statement )? ;
 whileStmt      → "while" "(" expression ")" statement ;
 forStmt        → "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;

 expression     → assignment ;
 assignment     → IDENTIFIER "=" assignment | logic_or ;

 logic_or       → logic_and( "||" logic_and )* ;
 logic_and      → bit_inc_or( "&&" bit_inc_or )* ;
 bit_inc_or     → bit_ex_or( "|" bit_ex_or )* ;
 bit_ex_or      → bit_and( "^" bit_and )* ;
 bit_and        → equality( "^" equality )* ;

 equality       → comparison(( "!=" | "==" ) comparison )* ;
 comparison     → addition(( ">" | ">=" | "<" | "<=" ) addition )* ;
 addition       → multiplication(( "-" | "+" ) multiplication )* ;
 multiplication → unary(( "/" | "*" ) unary )* ;
 unary          → ( "!" | "-" ) unary | primary ;

 primary        → "true" | "false" | "nil" | NUMBER | STRING | "(" expression ")" | IDENTIFIER ;

 